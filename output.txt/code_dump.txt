BOF: main/java/com/school/SchoolManagementApplication.java
package com.school;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SchoolManagementApplication {
    public static void main(String[] args) {
        SpringApplication.run(SchoolManagementApplication.class, args);
    }
}
EOF: main/java/com/school/SchoolManagementApplication.java

BOF: main/java/com/school/event/dto/EventDTO.java
package com.school.event.dto;

import lombok.*;

import java.time.LocalDateTime;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class EventDTO {
    private Long id;
    private String title;
    private String description;
    private LocalDateTime startsAt;
    private LocalDateTime endsAt;
    private Long classId;        // null for global event
}
EOF: main/java/com/school/event/dto/EventDTO.java

BOF: main/java/com/school/event/repository/EventRepository.java
package com.school.event.repository;

import com.school.event.model.Event;
import org.springframework.data.jpa.repository.JpaRepository;

public interface EventRepository extends JpaRepository<Event, Long> { }
EOF: main/java/com/school/event/repository/EventRepository.java

BOF: main/java/com/school/event/controller/EventController.java
package com.school.event.controller;

import com.school.event.dto.EventDTO;
import com.school.event.service.EventService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/events")
@RequiredArgsConstructor
public class EventController {

    private final EventService svc;

    @GetMapping
    public List<EventDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public EventDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<EventDTO> create(@RequestBody EventDTO dto) {
        EventDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/events/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public EventDTO update(@PathVariable Long id, @RequestBody EventDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }
}
EOF: main/java/com/school/event/controller/EventController.java

BOF: main/java/com/school/event/model/Event.java
package com.school.event.model;

import com.school.schoolclass.model.SchoolClass;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Event {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String title;             // "Sports Day"

    @Column(columnDefinition = "TEXT")
    private String description;

    private LocalDateTime startsAt;
    private LocalDateTime endsAt;

    /** Null ⇒ whole-school event; non-null ⇒ only that class. */
    @ManyToOne(fetch = FetchType.LAZY)
    private SchoolClass schoolClass;
}
EOF: main/java/com/school/event/model/Event.java

BOF: main/java/com/school/event/service/EventService.java
package com.school.event.service;

import com.school.common.exception.NotFoundException;
import com.school.event.dto.EventDTO;
import com.school.event.model.Event;
import com.school.event.repository.EventRepository;
import com.school.schoolclass.repository.SchoolClassRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class EventService {

    private final EventRepository repo;
    private final SchoolClassRepository classRepo;

    public List<EventDTO> findAll() { return repo.findAll().stream().map(this::toDto).toList(); }

    public EventDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Event " + id + " not found")));
    }

    public EventDTO create(EventDTO dto) { return toDto(repo.save(toEntity(dto))); }

    public EventDTO update(Long id, EventDTO dto) {
        Event e = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Event " + id + " not found"));
        e.setTitle(dto.getTitle());
        e.setDescription(dto.getDescription());
        e.setStartsAt(dto.getStartsAt());
        e.setEndsAt(dto.getEndsAt());
        e.setSchoolClass(resolveClass(dto.getClassId()));
        return toDto(repo.save(e));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Event " + id + " not found");
        repo.deleteById(id);
    }

    /* ---------- helpers ---------- */
    private EventDTO toDto(Event e) {
        return EventDTO.builder()
                .id(e.getId())
                .title(e.getTitle())
                .description(e.getDescription())
                .startsAt(e.getStartsAt())
                .endsAt(e.getEndsAt())
                .classId(e.getSchoolClass() == null ? null : e.getSchoolClass().getId())
                .build();
    }

    private Event toEntity(EventDTO d) {
        return Event.builder()
                .title(d.getTitle())
                .description(d.getDescription())
                .startsAt(d.getStartsAt())
                .endsAt(d.getEndsAt())
                .schoolClass(resolveClass(d.getClassId()))
                .build();
    }

    private com.school.schoolclass.model.SchoolClass resolveClass(Long id) {
        if (id == null) return null;
        return classRepo.findById(id)
                .orElseThrow(() -> new NotFoundException("Class " + id + " not found"));
    }
}
EOF: main/java/com/school/event/service/EventService.java

BOF: main/java/com/school/teacher/dto/TeacherDTO.java
package com.school.teacher.dto;

import lombok.*;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class TeacherDTO {
    private Long id;
    private String fullName;
    private String email;
}
EOF: main/java/com/school/teacher/dto/TeacherDTO.java

BOF: main/java/com/school/teacher/repository/TeacherRepository.java
package com.school.teacher.repository;

import com.school.teacher.model.Teacher;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;
public interface TeacherRepository extends JpaRepository<Teacher, Long> {
    // derived-query: Spring Data figures the JPQL out for you
    List<Teacher> findAllBySubjects_Id(Long subjectId);
}
EOF: main/java/com/school/teacher/repository/TeacherRepository.java

BOF: main/java/com/school/teacher/controller/TeacherController.java
package com.school.teacher.controller;

import com.school.teacher.dto.TeacherDTO;
import com.school.teacher.service.TeacherService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/teachers")
@RequiredArgsConstructor
public class TeacherController {

    private final TeacherService svc;

    @GetMapping
    public List<TeacherDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public TeacherDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<TeacherDTO> create(@RequestBody TeacherDTO dto) {
        TeacherDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/teachers/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public TeacherDTO update(@PathVariable Long id, @RequestBody TeacherDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }
}
EOF: main/java/com/school/teacher/controller/TeacherController.java

BOF: main/java/com/school/teacher/model/Teacher.java
package com.school.teacher.model;
import com.school.subject.model.Subject;

import java.util.HashSet;
import java.util.Set;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Teacher {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String fullName;

    @Column(nullable = false, unique = true)
    private String email;


    @ManyToMany
    @JoinTable(name = "teacher_subject",
            joinColumns = @JoinColumn(name = "teacher_id"),
            inverseJoinColumns = @JoinColumn(name = "subject_id"))
    @Builder.Default
    private Set<Subject> subjects = new HashSet<>();

}
EOF: main/java/com/school/teacher/model/Teacher.java

BOF: main/java/com/school/teacher/service/TeacherService.java
package com.school.teacher.service;

import com.school.teacher.dto.TeacherDTO;
import com.school.teacher.model.Teacher;
import com.school.teacher.repository.TeacherRepository;
import com.school.common.exception.NotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class TeacherService {

    private final TeacherRepository repo;

    public List<TeacherDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    public TeacherDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Teacher " + id + " not found")));
    }

    public TeacherDTO create(TeacherDTO dto) {
        return toDto(repo.save(toEntity(dto)));
    }

    public TeacherDTO update(Long id, TeacherDTO dto) {
        Teacher t = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Teacher " + id + " not found"));
        t.setFullName(dto.getFullName());
        t.setEmail(dto.getEmail());
        return toDto(repo.save(t));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Teacher " + id + " not found");
        repo.deleteById(id);
    }
    public List<TeacherDTO> findBySubject(Long subjectId) {
        List<Teacher> teachers = repo.findAllBySubjects_Id(subjectId);
        if (teachers.isEmpty()) {
            throw new NotFoundException("No teachers found for subject " + subjectId);
        }
        return teachers.stream().map(this::toDto).toList();
    }
    /* ---------- mapping helpers ---------- */
    private TeacherDTO toDto(Teacher t) {
        return TeacherDTO.builder()
                .id(t.getId())
                .fullName(t.getFullName())
                .email(t.getEmail())
                .build();
    }

    private Teacher toEntity(TeacherDTO d) {
        return Teacher.builder()
                .fullName(d.getFullName())
                .email(d.getEmail())
                .build();
    }
}
EOF: main/java/com/school/teacher/service/TeacherService.java

BOF: main/java/com/school/announcement/dto/AnnouncementDTO.java
package com.school.announcement.dto;

import lombok.*;

import java.time.LocalDateTime;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class AnnouncementDTO {
    private Long id;
    private String title;
    private String content;
    private LocalDateTime publishedAt;
    private Long classId;          // null = global
}
EOF: main/java/com/school/announcement/dto/AnnouncementDTO.java

BOF: main/java/com/school/announcement/repository/AnnouncementRepository.java
package com.school.announcement.repository;

import com.school.announcement.model.Announcement;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AnnouncementRepository extends JpaRepository<Announcement, Long> { }
EOF: main/java/com/school/announcement/repository/AnnouncementRepository.java

BOF: main/java/com/school/announcement/controller/AnnouncementController.java
package com.school.announcement.controller;

import com.school.announcement.dto.AnnouncementDTO;
import com.school.announcement.service.AnnouncementService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/announcements")
@RequiredArgsConstructor
public class AnnouncementController {

    private final AnnouncementService svc;

    @GetMapping
    public List<AnnouncementDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public AnnouncementDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<AnnouncementDTO> create(@RequestBody AnnouncementDTO dto) {
        AnnouncementDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/announcements/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public AnnouncementDTO update(@PathVariable Long id, @RequestBody AnnouncementDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }
}
EOF: main/java/com/school/announcement/controller/AnnouncementController.java

BOF: main/java/com/school/announcement/model/Announcement.java
package com.school.announcement.model;

import com.school.schoolclass.model.SchoolClass;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Announcement {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String title;                  // "Exam timetable"

    @Column(columnDefinition = "TEXT", nullable = false)
    private String content;                // body text / HTML

    @Column(nullable = false)
    private LocalDateTime publishedAt;

    /** Null ⇒ visible to everyone. */
    @ManyToOne(fetch = FetchType.LAZY)
    private SchoolClass schoolClass;
}
EOF: main/java/com/school/announcement/model/Announcement.java

BOF: main/java/com/school/announcement/service/AnnouncementService.java
package com.school.announcement.service;

import com.school.common.exception.NotFoundException;
import com.school.announcement.dto.AnnouncementDTO;
import com.school.announcement.model.Announcement;
import com.school.announcement.repository.AnnouncementRepository;
import com.school.schoolclass.repository.SchoolClassRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
public class AnnouncementService {

    private final AnnouncementRepository repo;
    private final SchoolClassRepository classRepo;

    public List<AnnouncementDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    public AnnouncementDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Announcement " + id + " not found")));
    }

    public AnnouncementDTO create(AnnouncementDTO dto) {
        if (dto.getPublishedAt() == null) dto.setPublishedAt(LocalDateTime.now());
        return toDto(repo.save(toEntity(dto)));
    }

    public AnnouncementDTO update(Long id, AnnouncementDTO dto) {
        Announcement a = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Announcement " + id + " not found"));
        a.setTitle(dto.getTitle());
        a.setContent(dto.getContent());
        a.setPublishedAt(dto.getPublishedAt());
        a.setSchoolClass(resolveClass(dto.getClassId()));
        return toDto(repo.save(a));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Announcement " + id + " not found");
        repo.deleteById(id);
    }

    /* ---------- helpers ---------- */
    private AnnouncementDTO toDto(Announcement a) {
        return AnnouncementDTO.builder()
                .id(a.getId())
                .title(a.getTitle())
                .content(a.getContent())
                .publishedAt(a.getPublishedAt())
                .classId(a.getSchoolClass() == null ? null : a.getSchoolClass().getId())
                .build();
    }

    private Announcement toEntity(AnnouncementDTO d) {
        return Announcement.builder()
                .title(d.getTitle())
                .content(d.getContent())
                .publishedAt(d.getPublishedAt())
                .schoolClass(resolveClass(d.getClassId()))
                .build();
    }

    private com.school.schoolclass.model.SchoolClass resolveClass(Long id) {
        if (id == null) return null;
        return classRepo.findById(id)
                .orElseThrow(() -> new NotFoundException("Class " + id + " not found"));
    }
}
EOF: main/java/com/school/announcement/service/AnnouncementService.java

BOF: main/java/com/school/lesson/dto/LessonDTO.java
package com.school.lesson.dto;

import lombok.*;

import java.time.LocalDate;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class LessonDTO {
    private Long id;
    private String topic;
    private LocalDate lessonDate;
    private Long subjectId;
    private Long teacherId;
    private Long classId;
}
EOF: main/java/com/school/lesson/dto/LessonDTO.java

BOF: main/java/com/school/lesson/repository/LessonRepository.java
package com.school.lesson.repository;

import com.school.lesson.model.Lesson;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface LessonRepository extends JpaRepository<Lesson, Long> {
    List<Lesson> findAllBySubject_Id(Long subjectId);
}
EOF: main/java/com/school/lesson/repository/LessonRepository.java

BOF: main/java/com/school/lesson/controller/LessonController.java
package com.school.lesson.controller;

import com.school.lesson.dto.LessonDTO;
import com.school.lesson.service.LessonService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/lessons")
@RequiredArgsConstructor
public class LessonController {

    private final LessonService svc;

    @GetMapping
    public List<LessonDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public LessonDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<LessonDTO> create(@RequestBody LessonDTO dto) {
        LessonDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/lessons/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public LessonDTO update(@PathVariable Long id, @RequestBody LessonDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }

    /* ── placeholder sub-routes ─────────────────── */
    @GetMapping("/{id}/exams")
    public List<?> exams(@PathVariable Long id) { return List.of(); }

    @GetMapping("/{id}/assignments")
    public List<?> assignments(@PathVariable Long id) { return List.of(); }

    @GetMapping("/{id}/attendances")
    public List<?> attendances(@PathVariable Long id) { return List.of(); }
}
EOF: main/java/com/school/lesson/controller/LessonController.java

BOF: main/java/com/school/lesson/model/Lesson.java
package com.school.lesson.model;

import com.school.subject.model.Subject;
import com.school.teacher.model.Teacher;
import com.school.schoolclass.model.SchoolClass;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Lesson {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String topic;                   // e.g. "Fractions"

    private LocalDate lessonDate;           // optional

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Subject subject;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Teacher teacher;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private SchoolClass schoolClass;
}
EOF: main/java/com/school/lesson/model/Lesson.java

BOF: main/java/com/school/lesson/service/LessonService.java
package com.school.lesson.service;

import com.school.common.exception.NotFoundException;
import com.school.lesson.dto.LessonDTO;
import com.school.lesson.model.Lesson;
import com.school.lesson.repository.LessonRepository;
import com.school.subject.repository.SubjectRepository;
import com.school.teacher.repository.TeacherRepository;
import com.school.schoolclass.repository.SchoolClassRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class LessonService {

    private final LessonRepository repo;
    private final SubjectRepository subjectRepo;
    private final TeacherRepository teacherRepo;
    private final SchoolClassRepository classRepo;

    public List<LessonDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    public LessonDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Lesson " + id + " not found")));
    }

    public LessonDTO create(LessonDTO dto) { return toDto(repo.save(toEntity(dto))); }

    public LessonDTO update(Long id, LessonDTO dto) {
        Lesson l = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Lesson " + id + " not found"));
        l.setTopic(dto.getTopic());
        l.setLessonDate(dto.getLessonDate());
        l.setSubject(subjectRepo.findById(dto.getSubjectId())
                .orElseThrow(() -> new NotFoundException("Subject " + dto.getSubjectId() + " not found")));
        l.setTeacher(teacherRepo.findById(dto.getTeacherId())
                .orElseThrow(() -> new NotFoundException("Teacher " + dto.getTeacherId() + " not found")));
        l.setSchoolClass(classRepo.findById(dto.getClassId())
                .orElseThrow(() -> new NotFoundException("Class " + dto.getClassId() + " not found")));
        return toDto(repo.save(l));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Lesson " + id + " not found");
        repo.deleteById(id);
    }
    public List<LessonDTO> findBySubject(Long subjectId) {
        List<Lesson> lessons = repo.findAllBySubject_Id(subjectId);
        if (lessons.isEmpty()) {
            throw new NotFoundException("No lessons found for subject " + subjectId);
        }
        return lessons.stream().map(this::toDto).toList();
    }
    /* ---------- mapping helpers ---------- */
    private LessonDTO toDto(Lesson l) {
        return LessonDTO.builder()
                .id(l.getId())
                .topic(l.getTopic())
                .lessonDate(l.getLessonDate())
                .subjectId(l.getSubject().getId())
                .teacherId(l.getTeacher().getId())
                .classId(l.getSchoolClass().getId())
                .build();
    }

    private Lesson toEntity(LessonDTO d) {
        return Lesson.builder()
                .topic(d.getTopic())
                .lessonDate(d.getLessonDate())
                .subject(subjectRepo.findById(d.getSubjectId())
                        .orElseThrow(() -> new NotFoundException("Subject " + d.getSubjectId() + " not found")))
                .teacher(teacherRepo.findById(d.getTeacherId())
                        .orElseThrow(() -> new NotFoundException("Teacher " + d.getTeacherId() + " not found")))
                .schoolClass(classRepo.findById(d.getClassId())
                        .orElseThrow(() -> new NotFoundException("Class " + d.getClassId() + " not found")))
                .build();
    }
}
EOF: main/java/com/school/lesson/service/LessonService.java

BOF: main/java/com/school/exam/dto/ExamDTO.java
package com.school.exam.dto;

import lombok.*;

import java.time.LocalDate;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class ExamDTO {
    private Long id;
    private String title;
    private LocalDate examDate;
    private Long lessonId;
}
EOF: main/java/com/school/exam/dto/ExamDTO.java

BOF: main/java/com/school/exam/repository/ExamRepository.java
package com.school.exam.repository;

import com.school.exam.model.Exam;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ExamRepository extends JpaRepository<Exam, Long> { }
EOF: main/java/com/school/exam/repository/ExamRepository.java

BOF: main/java/com/school/exam/controller/ExamController.java
package com.school.exam.controller;

import com.school.exam.dto.ExamDTO;
import com.school.exam.service.ExamService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/exams")
@RequiredArgsConstructor
public class ExamController {

    private final ExamService svc;

    @GetMapping
    public List<ExamDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public ExamDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<ExamDTO> create(@RequestBody ExamDTO dto) {
        ExamDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/exams/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public ExamDTO update(@PathVariable Long id, @RequestBody ExamDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }

    /* ── placeholder sub-route ─────────── */
    @GetMapping("/{id}/results")
    public List<?> results(@PathVariable Long id) { return List.of(); }
}
EOF: main/java/com/school/exam/controller/ExamController.java

BOF: main/java/com/school/exam/model/Exam.java
package com.school.exam.model;

import com.school.lesson.model.Lesson;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Exam {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String title;            // e.g. "Mid-term Algebra"

    private LocalDate examDate;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Lesson lesson;
}
EOF: main/java/com/school/exam/model/Exam.java

BOF: main/java/com/school/exam/service/ExamService.java
package com.school.exam.service;

import com.school.common.exception.NotFoundException;
import com.school.exam.dto.ExamDTO;
import com.school.exam.model.Exam;
import com.school.exam.repository.ExamRepository;
import com.school.lesson.repository.LessonRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class ExamService {

    private final ExamRepository repo;
    private final LessonRepository lessonRepo;

    public List<ExamDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    public ExamDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Exam " + id + " not found")));
    }

    public ExamDTO create(ExamDTO dto) { return toDto(repo.save(toEntity(dto))); }

    public ExamDTO update(Long id, ExamDTO dto) {
        Exam e = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Exam " + id + " not found"));
        e.setTitle(dto.getTitle());
        e.setExamDate(dto.getExamDate());
        e.setLesson(lessonRepo.findById(dto.getLessonId())
                .orElseThrow(() -> new NotFoundException("Lesson " + dto.getLessonId() + " not found")));
        return toDto(repo.save(e));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Exam " + id + " not found");
        repo.deleteById(id);
    }

    /* ---------- mapping helpers ---------- */
    private ExamDTO toDto(Exam e) {
        return ExamDTO.builder()
                .id(e.getId())
                .title(e.getTitle())
                .examDate(e.getExamDate())
                .lessonId(e.getLesson().getId())
                .build();
    }

    private Exam toEntity(ExamDTO d) {
        return Exam.builder()
                .title(d.getTitle())
                .examDate(d.getExamDate())
                .lesson(lessonRepo.findById(d.getLessonId())
                        .orElseThrow(() -> new NotFoundException("Lesson " + d.getLessonId() + " not found")))
                .build();
    }
}
EOF: main/java/com/school/exam/service/ExamService.java

BOF: main/java/com/school/parent/dto/ParentDTO.java
package com.school.parent.dto;

import lombok.*;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class ParentDTO {
    private Long id;
    private String fullName;
    private String email;
}
EOF: main/java/com/school/parent/dto/ParentDTO.java

BOF: main/java/com/school/parent/repository/ParentRepository.java
package com.school.parent.repository;

import com.school.parent.model.Parent;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ParentRepository extends JpaRepository<Parent, Long> { }
EOF: main/java/com/school/parent/repository/ParentRepository.java

BOF: main/java/com/school/parent/controller/ParentController.java
package com.school.parent.controller;

import com.school.parent.dto.ParentDTO;
import com.school.parent.service.ParentService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/parents")
@RequiredArgsConstructor
public class ParentController {

    private final ParentService svc;

    @GetMapping
    public List<ParentDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public ParentDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<ParentDTO> create(@RequestBody ParentDTO dto) {
        ParentDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/parents/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public ParentDTO update(@PathVariable Long id, @RequestBody ParentDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }
}
EOF: main/java/com/school/parent/controller/ParentController.java

BOF: main/java/com/school/parent/model/Parent.java
package com.school.parent.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Parent {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String fullName;

    @Column(nullable = false, unique = true)
    private String email;
}
EOF: main/java/com/school/parent/model/Parent.java

BOF: main/java/com/school/parent/service/ParentService.java
package com.school.parent.service;

import com.school.parent.dto.ParentDTO;
import com.school.parent.model.Parent;
import com.school.parent.repository.ParentRepository;
import com.school.common.exception.NotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class ParentService {

    private final ParentRepository repo;

    public List<ParentDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    public ParentDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Parent " + id + " not found")));
    }

    public ParentDTO create(ParentDTO dto) {
        return toDto(repo.save(toEntity(dto)));
    }

    public ParentDTO update(Long id, ParentDTO dto) {
        Parent p = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Parent " + id + " not found"));
        p.setFullName(dto.getFullName());
        p.setEmail(dto.getEmail());
        return toDto(repo.save(p));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Parent " + id + " not found");
        repo.deleteById(id);
    }

    private ParentDTO toDto(Parent p) {
        return ParentDTO.builder()
                .id(p.getId())
                .fullName(p.getFullName())
                .email(p.getEmail())
                .build();
    }

    private Parent toEntity(ParentDTO d) {
        return Parent.builder()
                .fullName(d.getFullName())
                .email(d.getEmail())
                .build();
    }
}
EOF: main/java/com/school/parent/service/ParentService.java

BOF: main/java/com/school/schoolclass/dto/SchoolClassDTO.java
package com.school.schoolclass.dto;

import lombok.*;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class SchoolClassDTO {
    private Long id;
    private String name;
    private Long gradeId;
}
EOF: main/java/com/school/schoolclass/dto/SchoolClassDTO.java

BOF: main/java/com/school/schoolclass/repository/SchoolClassRepository.java
package com.school.schoolclass.repository;

import com.school.schoolclass.model.SchoolClass;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface SchoolClassRepository extends JpaRepository<SchoolClass, Long> {
    List<SchoolClass> findByGradeId(Long gradeId);
}
EOF: main/java/com/school/schoolclass/repository/SchoolClassRepository.java

BOF: main/java/com/school/schoolclass/controller/SchoolClassController.java
package com.school.schoolclass.controller;
import com.school.common.exception.NotFoundException;
import com.school.schoolclass.dto.SchoolClassDTO;
import com.school.schoolclass.service.SchoolClassService;
import com.school.schoolclass.model.SchoolClass;
import com.school.schoolclass.repository.SchoolClassRepository;
import com.school.student.dto.StudentDTO;
import com.school.student.service.StudentService;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/classes")
@RequiredArgsConstructor
public class SchoolClassController {

    private final SchoolClassService svc;
    private final SchoolClassRepository classRepo;   // NEW
    private final StudentService studentService;     // NEW

    @GetMapping
    public List<SchoolClassDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public SchoolClassDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<SchoolClassDTO> create(@RequestBody SchoolClassDTO dto) {
        SchoolClassDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/classes/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public SchoolClassDTO update(@PathVariable Long id, @RequestBody SchoolClassDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }

    /* ── placeholder sub-routes ───────────── */
    @GetMapping("/{id}/students")
    public List<StudentDTO> students(@PathVariable Long id) {
        SchoolClass sc = classRepo.findById(id)
                .orElseThrow(() -> new NotFoundException("Class " + id + " not found"));
        return sc.getStudents()
                 .stream()
                 .map(studentService::toDto)
                 .toList();
    }

    @GetMapping("/{id}/lessons")
    public List<?> lessons(@PathVariable Long id) { return List.of(); }

    @GetMapping("/{id}/events")
    public List<?> events(@PathVariable Long id) { return List.of(); }

    @GetMapping("/{id}/announcements")
    public List<?> ann(@PathVariable Long id) { return List.of(); }
}
EOF: main/java/com/school/schoolclass/controller/SchoolClassController.java

BOF: main/java/com/school/schoolclass/model/SchoolClass.java
package com.school.schoolclass.model;

import java.util.ArrayList;
import java.util.List;

import com.school.grade.model.Grade;
import com.school.student.model.Student;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class SchoolClass {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Grade grade;


    @Builder.Default        
    @OneToMany(mappedBy = "schoolClass",
            cascade = CascadeType.ALL,
            orphanRemoval = true)
    private List<Student> students = new ArrayList<>();
}

EOF: main/java/com/school/schoolclass/model/SchoolClass.java

BOF: main/java/com/school/schoolclass/service/SchoolClassService.java
package com.school.schoolclass.service;

import com.school.common.exception.NotFoundException;
import com.school.grade.repository.GradeRepository;
import com.school.schoolclass.dto.SchoolClassDTO;
import com.school.schoolclass.model.SchoolClass;
import com.school.schoolclass.repository.SchoolClassRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class SchoolClassService {

    private final SchoolClassRepository repo;
    private final GradeRepository gradeRepo;

    public List<SchoolClassDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    public SchoolClassDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Class " + id + " not found")));
    }

    public SchoolClassDTO create(SchoolClassDTO dto) {
        return toDto(repo.save(toEntity(dto)));
    }

    public SchoolClassDTO update(Long id, SchoolClassDTO dto) {
        SchoolClass c = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Class " + id + " not found"));
        c.setName(dto.getName());
        c.setGrade(gradeRepo.findById(dto.getGradeId())
                .orElseThrow(() -> new NotFoundException("Grade " + dto.getGradeId() + " not found")));
        return toDto(repo.save(c));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Class " + id + " not found");
        repo.deleteById(id);
    }

    /* ---------- helpers ---------- */
    public  SchoolClassDTO toDto(SchoolClass c) {
        return SchoolClassDTO.builder()
                .id(c.getId())
                .name(c.getName())
                .gradeId(c.getGrade().getId())
                .build();
    }

    public SchoolClass toEntity(SchoolClassDTO d) {
        return SchoolClass.builder()
                .name(d.getName())
                .grade(gradeRepo.findById(d.getGradeId())
                        .orElseThrow(() -> new NotFoundException("Grade " + d.getGradeId() + " not found")))
                .build();
    }
}
EOF: main/java/com/school/schoolclass/service/SchoolClassService.java

BOF: main/java/com/school/common/exception/RestExceptionHandler.java
package com.school.common.exception;

import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

@ControllerAdvice
public class RestExceptionHandler {

    @ExceptionHandler(NotFoundException.class)
    public ResponseEntity<String> handleNotFound(NotFoundException ex) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
    }
}
EOF: main/java/com/school/common/exception/RestExceptionHandler.java

BOF: main/java/com/school/common/exception/NotFoundException.java
package com.school.common.exception;

public class NotFoundException extends RuntimeException {
    public NotFoundException(String msg) { super(msg); }
}
EOF: main/java/com/school/common/exception/NotFoundException.java

BOF: main/java/com/school/grade/dto/GradeDTO.java
package com.school.grade.dto;

import lombok.*;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class GradeDTO {
    private Long id;
    private String name;
}
EOF: main/java/com/school/grade/dto/GradeDTO.java

BOF: main/java/com/school/grade/repository/GradeRepository.java
package com.school.grade.repository;

import com.school.grade.model.Grade;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GradeRepository extends JpaRepository<Grade, Long> { }
EOF: main/java/com/school/grade/repository/GradeRepository.java

BOF: main/java/com/school/grade/controller/GradeController.java
package com.school.grade.controller;

import com.school.grade.dto.GradeDTO;
import com.school.grade.service.GradeService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/grades")
@RequiredArgsConstructor
public class GradeController {

    private final GradeService svc;

    @GetMapping
    public List<GradeDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public GradeDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<GradeDTO> create(@RequestBody GradeDTO dto) {
        GradeDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/grades/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public GradeDTO update(@PathVariable Long id, @RequestBody GradeDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }

    /* ── placeholder routes required by spec ───────── */
    @GetMapping("/{id}/students")
    public List<?> studentsInGrade(@PathVariable Long id) { return List.of(); }

    @GetMapping("/{id}/classes")
    public List<?> classesInGrade(@PathVariable Long id) { return List.of(); }
}
EOF: main/java/com/school/grade/controller/GradeController.java

BOF: main/java/com/school/grade/model/Grade.java
package com.school.grade.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Grade {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** e.g. "Grade 1", "Year 7", "Terminale" … */
    @Column(nullable = false, unique = true)
    private String name;
}
EOF: main/java/com/school/grade/model/Grade.java

BOF: main/java/com/school/grade/service/GradeService.java
package com.school.grade.service;

import com.school.grade.dto.GradeDTO;
import com.school.grade.model.Grade;
import com.school.grade.repository.GradeRepository;
import com.school.common.exception.NotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class GradeService {

    private final GradeRepository repo;

    public List<GradeDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    public GradeDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Grade " + id + " not found")));
    }

    public GradeDTO create(GradeDTO dto) {
        return toDto(repo.save(toEntity(dto)));
    }

    public GradeDTO update(Long id, GradeDTO dto) {
        Grade g = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Grade " + id + " not found"));
        g.setName(dto.getName());
        return toDto(repo.save(g));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Grade " + id + " not found");
        repo.deleteById(id);
    }

    /* ---------- mapping helpers ---------- */
    private GradeDTO toDto(Grade g) {
        return GradeDTO.builder()
                .id(g.getId())
                .name(g.getName())
                .build();
    }

    private Grade toEntity(GradeDTO d) {
        return Grade.builder()
                .name(d.getName())
                .build();
    }
}
EOF: main/java/com/school/grade/service/GradeService.java

BOF: main/java/com/school/assignment/dto/AssignmentDTO.java
package com.school.assignment.dto;

import lombok.*;

import java.time.LocalDate;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class AssignmentDTO {
    private Long id;
    private String title;
    private LocalDate dueDate;
    private Long lessonId;
}
EOF: main/java/com/school/assignment/dto/AssignmentDTO.java

BOF: main/java/com/school/assignment/repository/AssignmentRepository.java
package com.school.assignment.repository;

import com.school.assignment.model.Assignment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AssignmentRepository extends JpaRepository<Assignment, Long> { }
EOF: main/java/com/school/assignment/repository/AssignmentRepository.java

BOF: main/java/com/school/assignment/controller/AssignmentController.java
package com.school.assignment.controller;

import com.school.assignment.dto.AssignmentDTO;
import com.school.assignment.service.AssignmentService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/assignments")
@RequiredArgsConstructor
public class AssignmentController {

    private final AssignmentService svc;

    @GetMapping
    public List<AssignmentDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public AssignmentDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<AssignmentDTO> create(@RequestBody AssignmentDTO dto) {
        AssignmentDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/assignments/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public AssignmentDTO update(@PathVariable Long id, @RequestBody AssignmentDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }

    /* ── placeholder sub-route ───────────── */
    @GetMapping("/{id}/results")
    public List<?> results(@PathVariable Long id) { return List.of(); }
}
EOF: main/java/com/school/assignment/controller/AssignmentController.java

BOF: main/java/com/school/assignment/model/Assignment.java
package com.school.assignment.model;

import com.school.lesson.model.Lesson;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Assignment {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String title;          // e.g. "Homework #4"

    private LocalDate dueDate;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Lesson lesson;
}
EOF: main/java/com/school/assignment/model/Assignment.java

BOF: main/java/com/school/assignment/service/AssignmentService.java
package com.school.assignment.service;

import com.school.common.exception.NotFoundException;
import com.school.assignment.dto.AssignmentDTO;
import com.school.assignment.model.Assignment;
import com.school.assignment.repository.AssignmentRepository;
import com.school.lesson.repository.LessonRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class AssignmentService {

    private final AssignmentRepository repo;
    private final LessonRepository lessonRepo;

    public List<AssignmentDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    public AssignmentDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Assignment " + id + " not found")));
    }

    public AssignmentDTO create(AssignmentDTO dto) { return toDto(repo.save(toEntity(dto))); }

    public AssignmentDTO update(Long id, AssignmentDTO dto) {
        Assignment a = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Assignment " + id + " not found"));
        a.setTitle(dto.getTitle());
        a.setDueDate(dto.getDueDate());
        a.setLesson(lessonRepo.findById(dto.getLessonId())
                .orElseThrow(() -> new NotFoundException("Lesson " + dto.getLessonId() + " not found")));
        return toDto(repo.save(a));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Assignment " + id + " not found");
        repo.deleteById(id);
    }

    /* ---------- mapping helpers ---------- */
    private AssignmentDTO toDto(Assignment a) {
        return AssignmentDTO.builder()
                .id(a.getId())
                .title(a.getTitle())
                .dueDate(a.getDueDate())
                .lessonId(a.getLesson().getId())
                .build();
    }

    private Assignment toEntity(AssignmentDTO d) {
        return Assignment.builder()
                .title(d.getTitle())
                .dueDate(d.getDueDate())
                .lesson(lessonRepo.findById(d.getLessonId())
                        .orElseThrow(() -> new NotFoundException("Lesson " + d.getLessonId() + " not found")))
                .build();
    }
}
EOF: main/java/com/school/assignment/service/AssignmentService.java

BOF: main/java/com/school/admin/dto/AdminDTO.java
package com.school.admin.dto;

import lombok.*;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class AdminDTO {
    private Long id;
    private String fullName;
    private String email;
}
EOF: main/java/com/school/admin/dto/AdminDTO.java

BOF: main/java/com/school/admin/repository/AdminRepository.java
package com.school.admin.repository;

import com.school.admin.model.Admin;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AdminRepository extends JpaRepository<Admin, Long> { }
EOF: main/java/com/school/admin/repository/AdminRepository.java

BOF: main/java/com/school/admin/controller/AdminController.java
package com.school.admin.controller;

import com.school.admin.dto.AdminDTO;
import com.school.admin.service.AdminService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/admins")
@RequiredArgsConstructor
public class AdminController {

    private final AdminService svc;

    @GetMapping
    public List<AdminDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public AdminDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<AdminDTO> create(@RequestBody AdminDTO dto) {
        AdminDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/admins/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public AdminDTO update(@PathVariable Long id, @RequestBody AdminDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }
}
EOF: main/java/com/school/admin/controller/AdminController.java

BOF: main/java/com/school/admin/model/Admin.java
package com.school.admin.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Admin {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String fullName;

    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)
    private String password;   // hash it later in security layer
}
EOF: main/java/com/school/admin/model/Admin.java

BOF: main/java/com/school/admin/service/AdminService.java
package com.school.admin.service;

import com.school.admin.dto.AdminDTO;
import com.school.admin.model.Admin;
import com.school.admin.repository.AdminRepository;
import com.school.common.exception.NotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class AdminService {

    private final AdminRepository repo;

    public List<AdminDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    public AdminDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Admin " + id + " not found")));
    }

    public AdminDTO create(AdminDTO dto) {
        Admin saved = repo.save(toEntity(dto));
        return toDto(saved);
    }

    public AdminDTO update(Long id, AdminDTO dto) {
        Admin admin = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Admin " + id + " not found"));

        admin.setFullName(dto.getFullName());
        admin.setEmail(dto.getEmail());
        return toDto(repo.save(admin));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Admin " + id + " not found");
        repo.deleteById(id);
    }

    /* ---------- mapping helpers ---------- */
    private AdminDTO toDto(Admin a) {
        return AdminDTO.builder()
                .id(a.getId())
                .fullName(a.getFullName())
                .email(a.getEmail())
                .build();
    }

    private Admin toEntity(AdminDTO d) {
        return Admin.builder()
                .fullName(d.getFullName())
                .email(d.getEmail())
                .password("changeme") // placeholder until security hashed
                .build();
    }
}
EOF: main/java/com/school/admin/service/AdminService.java

BOF: main/java/com/school/student/dto/StudentDTO.java
package com.school.student.dto;

import lombok.*;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class StudentDTO {
    private Long id;
    private String fullName;
    private String email;
    private Long classId;          // NEW
}
EOF: main/java/com/school/student/dto/StudentDTO.java

BOF: main/java/com/school/student/repository/StudentRepository.java
package com.school.student.repository;

import com.school.student.model.Student;
import org.springframework.data.jpa.repository.JpaRepository;

public interface StudentRepository extends JpaRepository<Student, Long> { }
EOF: main/java/com/school/student/repository/StudentRepository.java

BOF: main/java/com/school/student/controller/StudentController.java
package com.school.student.controller;

import com.school.student.dto.StudentDTO;
import com.school.student.service.StudentService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/students")
@RequiredArgsConstructor
public class StudentController {

    private final StudentService svc;

    @GetMapping
    public List<StudentDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public StudentDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<StudentDTO> create(@RequestBody StudentDTO dto) {
        StudentDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/students/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public StudentDTO update(@PathVariable Long id, @RequestBody StudentDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }
}
EOF: main/java/com/school/student/controller/StudentController.java

BOF: main/java/com/school/student/model/Student.java
package com.school.student.model;

import com.school.schoolclass.model.SchoolClass;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Student {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String fullName;
    private String email;
    
    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    @JoinColumn(name = "class_id") 
    private SchoolClass schoolClass;
}
EOF: main/java/com/school/student/model/Student.java

BOF: main/java/com/school/student/service/StudentService.java
package com.school.student.service;

import com.school.student.dto.StudentDTO;
import com.school.student.model.Student;
import com.school.student.repository.StudentRepository;
import com.school.common.exception.NotFoundException;
import com.school.schoolclass.repository.SchoolClassRepository;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class StudentService {

    private final StudentRepository repo;
     private final SchoolClassRepository classRepo; 

    public List<StudentDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    public StudentDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Student " + id + " not found")));
    }

    public StudentDTO create(StudentDTO dto) {
        return toDto(repo.save(toEntity(dto)));
    }

    public StudentDTO update(Long id, StudentDTO dto) {
        Student st = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Student " + id + " not found"));
        st.setFullName(dto.getFullName());
        st.setEmail(dto.getEmail());
        return toDto(repo.save(st));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Student " + id + " not found");
        repo.deleteById(id);
    }

    /* ---------- mapping helpers ---------- */
    public StudentDTO toDto(Student s) {
        return StudentDTO.builder()
                .id(s.getId())
                .fullName(s.getFullName())
                .email(s.getEmail())
                .classId(s.getSchoolClass().getId())        // NEW
                .build();
    }

    private Student toEntity(StudentDTO d) {
        return Student.builder()
                .fullName(d.getFullName())
                .email(d.getEmail())
                .schoolClass(
                        classRepo.findById(d.getClassId())
                          .orElseThrow(() -> new NotFoundException("Class "+d.getClassId()+" not found"))
                )
                .build();
    }
}
EOF: main/java/com/school/student/service/StudentService.java

BOF: main/java/com/school/subject/dto/SubjectDTO.java
package com.school.subject.dto;

import lombok.*;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class SubjectDTO {
    private Long id;
    private String name;
}
EOF: main/java/com/school/subject/dto/SubjectDTO.java

BOF: main/java/com/school/subject/repository/SubjectRepository.java
package com.school.subject.repository;

import com.school.subject.model.Subject;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SubjectRepository extends JpaRepository<Subject, Long> {
    boolean existsByNameIgnoreCase(String name);
}

EOF: main/java/com/school/subject/repository/SubjectRepository.java

BOF: main/java/com/school/subject/controller/SubjectController.java
package com.school.subject.controller;

import com.school.subject.dto.SubjectDTO;
import com.school.subject.service.SubjectService;
import com.school.teacher.dto.TeacherDTO;
import com.school.teacher.service.TeacherService;
import com.school.lesson.dto.LessonDTO;
import com.school.lesson.service.LessonService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/subjects")
@RequiredArgsConstructor
public class SubjectController {

    private final SubjectService svc;
    private final TeacherService teacherSvc;   // ← ADD
    private final LessonService  lessonSvc;    // ← ADD

    /* ---------- CRUD ---------- */

    @GetMapping
    public List<SubjectDTO> getAll() {
        return svc.findAll();
    }

    @GetMapping("/{id}")
    public SubjectDTO getOne(@PathVariable Long id) {
        return svc.findById(id);
    }

    @PostMapping
    public ResponseEntity<SubjectDTO> create(@RequestBody SubjectDTO dto) {
        SubjectDTO saved = svc.create(dto);
        return ResponseEntity
                .created(URI.create("/api/subjects/" + saved.getId()))
                .body(saved);
    }

    @PutMapping("/{id}")
    public SubjectDTO update(@PathVariable Long id,
                             @RequestBody SubjectDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        svc.delete(id);
    }

    /* ---------- sub-routes ---------- */

    /**
     * GET /api/subjects/{id}/teachers  
     * returns all teachers who teach the subject
     */
    @GetMapping("/{id}/teachers")
    public List<TeacherDTO> teachers(@PathVariable Long id) {
        return teacherSvc.findBySubject(id);       // implemented in TeacherService
    }

    /**
     * GET /api/subjects/{id}/lessons  
     * returns all lessons mapped to the subject
     */
    @GetMapping("/{id}/lessons")
    public List<LessonDTO> lessons(@PathVariable Long id) {
        return lessonSvc.findBySubject(id);        // implemented in LessonService
    }
}
EOF: main/java/com/school/subject/controller/SubjectController.java

BOF: main/java/com/school/subject/model/Subject.java
package com.school.subject.model;

import com.school.teacher.model.Teacher;
import jakarta.persistence.*;
import lombok.*;

import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "subject")
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Subject {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true, length = 100)
    private String name;

    @Builder.Default                       // prevent NPEs when using builders
    @ManyToMany(mappedBy = "subjects")
    private Set<Teacher> teachers = new HashSet<>();
}
EOF: main/java/com/school/subject/model/Subject.java

BOF: main/java/com/school/subject/service/SubjectService.java
package com.school.subject.service;

import com.school.common.exception.NotFoundException;
import com.school.subject.dto.SubjectDTO;
import com.school.subject.model.Subject;
import com.school.subject.repository.SubjectRepository;
import com.school.teacher.model.Teacher;
import com.school.teacher.repository.TeacherRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@RequiredArgsConstructor
@Transactional          // ← every public method is now wrapped in a tx
public class SubjectService {

    private final SubjectRepository repo;
    private final TeacherRepository teacherRepo;        // ← ADD THIS

    /* ---------- CRUD ---------- */

    @Transactional(readOnly = true)
    public List<SubjectDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    @Transactional(readOnly = true)
    public SubjectDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Subject " + id + " not found")));
    }

    public SubjectDTO create(SubjectDTO dto) {
        // optional uniqueness guard
        if (repo.existsByNameIgnoreCase(dto.getName())) {
            throw new IllegalArgumentException("Subject name already exists");
        }
        return toDto(repo.save(toEntity(dto)));
    }

    public SubjectDTO update(Long id, SubjectDTO dto) {
        Subject s = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Subject " + id + " not found"));
        s.setName(dto.getName());
        return toDto(s);          // s is managed, save() not required
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Subject " + id + " not found");
        repo.deleteById(id);
    }

    /* ---------- RELATION HELPERS ---------- */

    /** Attach an existing subject to an existing teacher */
    public void assignToTeacher(Long subjectId, Long teacherId) {
        Subject  subject  = repo.findById(subjectId)
                                 .orElseThrow(() -> new NotFoundException("Subject " + subjectId));
        Teacher  teacher  = teacherRepo.findById(teacherId)
                                 .orElseThrow(() -> new NotFoundException("Teacher " + teacherId));

        subject.getTeachers().add(teacher);   // keep both sides in sync
        teacher.getSubjects().add(subject);
        // thanks to @Transactional the change flushes automatically
    }

    /** Remove the link between a subject and a teacher */
    public void unassignFromTeacher(Long subjectId, Long teacherId) {
        Subject subject = repo.findById(subjectId)
                              .orElseThrow(() -> new NotFoundException("Subject " + subjectId));
        Teacher teacher = teacherRepo.findById(teacherId)
                              .orElseThrow(() -> new NotFoundException("Teacher " + teacherId));

        subject.getTeachers().remove(teacher);
        teacher.getSubjects().remove(subject);
    }

    /* ---------- mapping helpers ---------- */

    private SubjectDTO toDto(Subject s) {
        return SubjectDTO.builder()
                .id(s.getId())
                .name(s.getName())
                .build();
    }

    private Subject toEntity(SubjectDTO d) {
        return Subject.builder()
                .name(d.getName())
                .build();
    }
}
EOF: main/java/com/school/subject/service/SubjectService.java

BOF: main/java/com/school/result/dto/ResultDTO.java
package com.school.result.dto;

import lombok.*;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class ResultDTO {
    private Long id;
    private Double score;
    private Long studentId;
    private Long examId;
}
EOF: main/java/com/school/result/dto/ResultDTO.java

BOF: main/java/com/school/result/repository/ResultRepository.java
package com.school.result.repository;

import com.school.result.model.Result;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ResultRepository extends JpaRepository<Result, Long> { }
EOF: main/java/com/school/result/repository/ResultRepository.java

BOF: main/java/com/school/result/controller/ResultController.java
package com.school.result.controller;

import com.school.result.dto.ResultDTO;
import com.school.result.service.ResultService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/results")
@RequiredArgsConstructor
public class ResultController {

    private final ResultService svc;

    @GetMapping
    public List<ResultDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public ResultDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<ResultDTO> create(@RequestBody ResultDTO dto) {
        ResultDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/results/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public ResultDTO update(@PathVariable Long id, @RequestBody ResultDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }
}
EOF: main/java/com/school/result/controller/ResultController.java

BOF: main/java/com/school/result/model/Result.java
package com.school.result.model;

import com.school.student.model.Student;
import com.school.exam.model.Exam;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Result {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Double score;                // e.g. 15.5

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Student student;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Exam exam;
}
EOF: main/java/com/school/result/model/Result.java

BOF: main/java/com/school/result/service/ResultService.java
package com.school.result.service;

import com.school.common.exception.NotFoundException;
import com.school.result.dto.ResultDTO;
import com.school.result.model.Result;
import com.school.result.repository.ResultRepository;
import com.school.student.repository.StudentRepository;
import com.school.exam.repository.ExamRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class ResultService {

    private final ResultRepository repo;
    private final StudentRepository studentRepo;
    private final ExamRepository examRepo;

    public List<ResultDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    public ResultDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Result " + id + " not found")));
    }

    public ResultDTO create(ResultDTO dto) { return toDto(repo.save(toEntity(dto))); }

    public ResultDTO update(Long id, ResultDTO dto) {
        Result r = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Result " + id + " not found"));
        r.setScore(dto.getScore());
        r.setStudent(studentRepo.findById(dto.getStudentId())
                .orElseThrow(() -> new NotFoundException("Student " + dto.getStudentId() + " not found")));
        r.setExam(examRepo.findById(dto.getExamId())
                .orElseThrow(() -> new NotFoundException("Exam " + dto.getExamId() + " not found")));
        return toDto(repo.save(r));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Result " + id + " not found");
        repo.deleteById(id);
    }

    /* ---------- helpers ---------- */
    private ResultDTO toDto(Result r) {
        return ResultDTO.builder()
                .id(r.getId())
                .score(r.getScore())
                .studentId(r.getStudent().getId())
                .examId(r.getExam().getId())
                .build();
    }

    private Result toEntity(ResultDTO d) {
        return Result.builder()
                .score(d.getScore())
                .student(studentRepo.findById(d.getStudentId())
                        .orElseThrow(() -> new NotFoundException("Student " + d.getStudentId() + " not found")))
                .exam(examRepo.findById(d.getExamId())
                        .orElseThrow(() -> new NotFoundException("Exam " + d.getExamId() + " not found")))
                .build();
    }
}
EOF: main/java/com/school/result/service/ResultService.java

BOF: main/java/com/school/attendance/dto/AttendanceDTO.java
package com.school.attendance.dto;

import com.school.attendance.model.Attendance.Status;
import lombok.*;

@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class AttendanceDTO {
    private Long id;
    private Status status;
    private Long studentId;
    private Long lessonId;
}
EOF: main/java/com/school/attendance/dto/AttendanceDTO.java

BOF: main/java/com/school/attendance/repository/AttendanceRepository.java
package com.school.attendance.repository;

import com.school.attendance.model.Attendance;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AttendanceRepository extends JpaRepository<Attendance, Long> { }
EOF: main/java/com/school/attendance/repository/AttendanceRepository.java

BOF: main/java/com/school/attendance/controller/AttendanceController.java
package com.school.attendance.controller;

import com.school.attendance.dto.AttendanceDTO;
import com.school.attendance.service.AttendanceService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/attendances")
@RequiredArgsConstructor
public class AttendanceController {

    private final AttendanceService svc;

    @GetMapping
    public List<AttendanceDTO> getAll() { return svc.findAll(); }

    @GetMapping("/{id}")
    public AttendanceDTO getOne(@PathVariable Long id) { return svc.findById(id); }

    @PostMapping
    public ResponseEntity<AttendanceDTO> create(@RequestBody AttendanceDTO dto) {
        AttendanceDTO saved = svc.create(dto);
        return ResponseEntity.created(URI.create("/api/attendances/" + saved.getId())).body(saved);
    }

    @PutMapping("/{id}")
    public AttendanceDTO update(@PathVariable Long id, @RequestBody AttendanceDTO dto) {
        return svc.update(id, dto);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) { svc.delete(id); }
}
EOF: main/java/com/school/attendance/controller/AttendanceController.java

BOF: main/java/com/school/attendance/model/Attendance.java
package com.school.attendance.model;

import com.school.student.model.Student;
import com.school.lesson.model.Lesson;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Attendance {

    public enum Status { PRESENT, ABSENT, LATE }

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Status status;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Student student;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Lesson lesson;
}
EOF: main/java/com/school/attendance/model/Attendance.java

BOF: main/java/com/school/attendance/service/AttendanceService.java
package com.school.attendance.service;

import com.school.common.exception.NotFoundException;
import com.school.attendance.dto.AttendanceDTO;
import com.school.attendance.model.Attendance;
import com.school.attendance.repository.AttendanceRepository;
import com.school.student.repository.StudentRepository;
import com.school.lesson.repository.LessonRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class AttendanceService {

    private final AttendanceRepository repo;
    private final StudentRepository studentRepo;
    private final LessonRepository lessonRepo;

    public List<AttendanceDTO> findAll() {
        return repo.findAll().stream().map(this::toDto).toList();
    }

    public AttendanceDTO findById(Long id) {
        return toDto(repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Attendance " + id + " not found")));
    }

    public AttendanceDTO create(AttendanceDTO dto) { return toDto(repo.save(toEntity(dto))); }

    public AttendanceDTO update(Long id, AttendanceDTO dto) {
        Attendance a = repo.findById(id)
                .orElseThrow(() -> new NotFoundException("Attendance " + id + " not found"));
        a.setStatus(dto.getStatus());
        a.setStudent(studentRepo.findById(dto.getStudentId())
                .orElseThrow(() -> new NotFoundException("Student " + dto.getStudentId() + " not found")));
        a.setLesson(lessonRepo.findById(dto.getLessonId())
                .orElseThrow(() -> new NotFoundException("Lesson " + dto.getLessonId() + " not found")));
        return toDto(repo.save(a));
    }

    public void delete(Long id) {
        if (!repo.existsById(id)) throw new NotFoundException("Attendance " + id + " not found");
        repo.deleteById(id);
    }

    /* ---------- helpers ---------- */
    private AttendanceDTO toDto(Attendance a) {
        return AttendanceDTO.builder()
                .id(a.getId())
                .status(a.getStatus())
                .studentId(a.getStudent().getId())
                .lessonId(a.getLesson().getId())
                .build();
    }

    private Attendance toEntity(AttendanceDTO d) {
        return Attendance.builder()
                .status(d.getStatus())
                .student(studentRepo.findById(d.getStudentId())
                        .orElseThrow(() -> new NotFoundException("Student " + d.getStudentId() + " not found")))
                .lesson(lessonRepo.findById(d.getLessonId())
                        .orElseThrow(() -> new NotFoundException("Lesson " + d.getLessonId() + " not found")))
                .build();
    }
}
EOF: main/java/com/school/attendance/service/AttendanceService.java

BOF: main/resources/db/migration/V11__create_assignment_table.sql
CREATE TABLE assignment (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(150) NOT NULL,
    due_date DATE,
    lesson_id BIGINT NOT NULL,
    CONSTRAINT fk_assignment_lesson FOREIGN KEY (lesson_id) REFERENCES lesson(id)
);
EOF: main/resources/db/migration/V11__create_assignment_table.sql

BOF: main/resources/db/migration/V6__create_class_table.sql
CREATE TABLE class (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    grade_id BIGINT NOT NULL,
    CONSTRAINT fk_class_grade FOREIGN KEY (grade_id) REFERENCES grade(id),
    UNIQUE KEY uk_class_name_grade (name, grade_id)
);
EOF: main/resources/db/migration/V6__create_class_table.sql

BOF: main/resources/db/migration/V5__create_grade_table.sql
CREATE TABLE grade (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);
EOF: main/resources/db/migration/V5__create_grade_table.sql

BOF: main/resources/db/migration/V2__create_student_table.sql
CREATE TABLE student (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(120) NOT NULL,
    email VARCHAR(120) NOT NULL UNIQUE
);
EOF: main/resources/db/migration/V2__create_student_table.sql

BOF: main/resources/db/migration/V15__create_announcement_table.sql
CREATE TABLE announcement (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(150) NOT NULL,
    content TEXT NOT NULL,
    published_at DATETIME NOT NULL,
    class_id BIGINT,
    CONSTRAINT fk_announcement_class FOREIGN KEY (class_id) REFERENCES school_class(id)
);
EOF: main/resources/db/migration/V15__create_announcement_table.sql

BOF: main/resources/db/migration/V8__create_subject_table.sql
CREATE TABLE subject (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(80) NOT NULL UNIQUE
);
EOF: main/resources/db/migration/V8__create_subject_table.sql

BOF: main/resources/db/migration/V10__create_exam_table.sql
CREATE TABLE exam (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(150) NOT NULL,
    exam_date DATE,
    lesson_id BIGINT NOT NULL,
    CONSTRAINT fk_exam_lesson FOREIGN KEY (lesson_id) REFERENCES lesson(id)
);
EOF: main/resources/db/migration/V10__create_exam_table.sql

BOF: main/resources/db/migration/V1__create_admin_table.sql
CREATE TABLE admin (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(120) NOT NULL,
    email VARCHAR(120) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL
);
EOF: main/resources/db/migration/V1__create_admin_table.sql

BOF: main/resources/db/migration/V17__create_teacher_subject_table.sql
CREATE TABLE teacher_subject (
    teacher_id  BIGINT NOT NULL,
    subject_id  BIGINT NOT NULL,
    PRIMARY KEY (teacher_id, subject_id),

    CONSTRAINT fk_ts_teacher
        FOREIGN KEY (teacher_id)
        REFERENCES teacher(id)
        ON DELETE CASCADE,

    CONSTRAINT fk_ts_subject
        FOREIGN KEY (subject_id)
        REFERENCES subject(id)
        ON DELETE CASCADE
);
EOF: main/resources/db/migration/V17__create_teacher_subject_table.sql

BOF: main/resources/db/migration/V9__create_lesson_table.sql
CREATE TABLE lesson (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    topic VARCHAR(150) NOT NULL,
    lesson_date DATE,
    subject_id BIGINT NOT NULL,
    teacher_id BIGINT NOT NULL,
    class_id  BIGINT NOT NULL,
    CONSTRAINT fk_lesson_subject FOREIGN KEY (subject_id) REFERENCES subject(id),
    CONSTRAINT fk_lesson_teacher FOREIGN KEY (teacher_id) REFERENCES teacher(id),
    CONSTRAINT fk_lesson_class   FOREIGN KEY (class_id)   REFERENCES school_class(id)
);
EOF: main/resources/db/migration/V9__create_lesson_table.sql

BOF: main/resources/db/migration/V7__rename_class_table.sql
-- bring Flyway table name in line with Hibernate
ALTER TABLE class RENAME TO school_class;
EOF: main/resources/db/migration/V7__rename_class_table.sql

BOF: main/resources/db/migration/V16__add_class_fk_to_student.sql
ALTER TABLE student ADD COLUMN class_id BIGINT NOT NULL;
ALTER TABLE student
  ADD CONSTRAINT fk_student_class FOREIGN KEY (class_id)
  REFERENCES school_class(id);
EOF: main/resources/db/migration/V16__add_class_fk_to_student.sql

BOF: main/resources/db/migration/V13__create_attendance_table.sql
CREATE TABLE attendance (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    status VARCHAR(10) NOT NULL,
    student_id BIGINT NOT NULL,
    lesson_id  BIGINT NOT NULL,
    CONSTRAINT fk_attendance_student FOREIGN KEY (student_id) REFERENCES student(id),
    CONSTRAINT fk_attendance_lesson  FOREIGN KEY (lesson_id)  REFERENCES lesson(id)
);
EOF: main/resources/db/migration/V13__create_attendance_table.sql

BOF: main/resources/db/migration/V14__create_event_table.sql
CREATE TABLE event (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(150) NOT NULL,
    description TEXT,
    starts_at DATETIME,
    ends_at   DATETIME,
    class_id BIGINT,
    CONSTRAINT fk_event_class FOREIGN KEY (class_id) REFERENCES school_class(id)
);
EOF: main/resources/db/migration/V14__create_event_table.sql

BOF: main/resources/db/migration/V4__create_parent_table.sql
CREATE TABLE parent (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(120) NOT NULL,
    email VARCHAR(120) NOT NULL UNIQUE
);
EOF: main/resources/db/migration/V4__create_parent_table.sql

BOF: main/resources/db/migration/V3__create_teacher_table.sql
CREATE TABLE teacher (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(120) NOT NULL,
    email VARCHAR(120) NOT NULL UNIQUE
);
EOF: main/resources/db/migration/V3__create_teacher_table.sql

BOF: main/resources/db/migration/V12__create_result_table.sql
CREATE TABLE result (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    score DOUBLE NOT NULL,
    student_id BIGINT NOT NULL,
    exam_id BIGINT NOT NULL,
    CONSTRAINT fk_result_student FOREIGN KEY (student_id) REFERENCES student(id),
    CONSTRAINT fk_result_exam    FOREIGN KEY (exam_id)    REFERENCES exam(id)
);
EOF: main/resources/db/migration/V12__create_result_table.sql

